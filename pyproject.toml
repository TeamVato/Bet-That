[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bet-that"
version = "0.1.0"
description = "NFL betting edge detection and analysis platform"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "pandas>=2.2,<3",
    "numpy>=1.26.4",
    "PyYAML>=6.0.1",
    "requests>=2.31",
    "python-dotenv>=1.0",
    "pydantic>=2.6",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.4.0",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["api", "adapters", "backend", "engine", "jobs", "models", "schemas", "utils", "app"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=60",
]
testpaths = [
    "tests",
    "backend/tests",
]
filterwarnings = [
    "error:::pandas.*FutureWarning",
    "error:::numpy.*FutureWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
]

# Coverage configuration
[tool.coverage.run]
source = [
    "api",
    "adapters",
    "backend/app",
    "engine",
    "jobs",
    "models",
    "schemas",
    "utils",
]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false  # Start lenient, tighten later
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false  # Start lenient
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
explicit_package_bases = true

# Gradually enable stricter checking
[[tool.mypy.overrides]]
module = [
    "engine.*",
    "adapters.odds.*",
]
disallow_untyped_defs = true
disallow_untyped_decorators = true

# Third-party modules without types
[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "nfl_data_py.*",
    "pandera.*",
    "tenacity.*",
    "fastapi.*",
    "sqlalchemy.*",
    "pydantic.*",
    "pytest.*",
    "pandas.*",
    "pydantic_settings.*",
    "alembic.*",
    "jose.*",
    "passlib.*",
    "uvicorn.*",
]
ignore_missing_imports = true

# Ignore specific files with complex type issues
[[tool.mypy.overrides]]
module = [
    "api.models",
    "api.crud.*",
    "api.endpoints.enhanced_edges",
    "api.utils.ratelimit",
    "api.auth.password_manager",
    "api.auth.security_utils",
    "backend.tests.test_user_registration_login",
    "alembic.versions.*",
]
ignore_errors = true
